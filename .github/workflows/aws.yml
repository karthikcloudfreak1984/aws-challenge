name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"


permissions:
  contents: read


jobs:
  deploy-infra:
     name: deploy-infra
     runs-on: ubuntu-latest
     defaults:
       run:
         working-directory: infracode/dev/us-east-1/infra/vpc
     env:
       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       AWS_DEFAULT_REGION: us-east-1
       ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
       ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
     steps:
       - name: Checkout
         uses: actions/checkout@v2
       - name: Setup Terragrunt
         uses: autero1/action-terragrunt@v1.1.0
         with:
           terragrunt_version: v0.38.6
       - name: Interact with Terragrunt
         run: terragrunt --version
       - name: Terragrunt plan
         run: terragrunt plan
       - name: Terragrunt apply
         run: terragrunt apply -auto-approve
  deploy-app:
    needs: deploy-infra
    name: deploy-app
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: app
    outputs:
      output1: ${{ steps.build-image.outputs.image }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: web_app-api
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: web_app-service
        cluster: dev-ecs
        codedeploy-appspec: appspec.json
        codedeploy-application: Deployment-web_app
        codedeploy-deployment-group: web_app-deployment-group
        wait-for-service-stability: true

    - name: Deploy for Blue/green deployment
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: dev-ecs
        service: web_app-service
        wait-for-service-stability: true
        codedeploy-appspec: appspec.json
        codedeploy-application: Deployment-web_app
        codedeploy-deployment-group: web_app-deployment-group
